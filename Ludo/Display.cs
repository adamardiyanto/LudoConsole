namespace LudoApp;
public class Display
{
    private char[,] _plainBoard = new char[,]
    {  //    '1' '2' '3' '4' '5' '6' '7' '8' '9' '0' '1' '2' '3' '4' '5'  
        {'|','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','|'}, 
        {'|','+','+','+','+','+','+','0','0','0','+','+','+','+','+','+','|'}, // 1
        {'|','+','-','-','-','-','+','0','0','S','+','-','-','-','-','+','|'}, // 2
        {'|','+','-','G','G','-','+','*','0','0','+','-','B','B','-','+','|'}, // 3
        {'|','+','-','G','G','-','+','0','0','0','+','-','B','B','-','+','|'}, // 4
        {'|','+','-','-','-','-','+','0','0','0','+','-','-','-','-','+','|'}, // 5
        {'|','+','+','+','+','+','+','0','0','0','+','+','+','+','+','+','|'}, // 6
        {'|','0','S','0','0','0','0','-','-','-','0','0','0','*','0','0','|'}, // 7
        {'|','0','0','0','0','0','0','-','-','-','0','0','0','0','0','0','|'}, // 8
        {'|','0','0','*','0','0','0','-','-','-','0','0','0','0','S','0','|'}, // 9
        {'|','+','+','+','+','+','+','0','0','0','+','+','+','+','+','+','|'}, // 10    
        {'|','+','-','-','-','-','+','0','0','0','+','-','-','-','-','+','|'}, // 11
        {'|','+','-','R','R','-','+','0','0','0','+','-','Y','Y','-','+','|'}, // 12
        {'|','+','-','R','R','-','+','0','0','*','+','-','Y','Y','-','+','|'}, // 13
        {'|','+','-','-','-','-','+','S','0','0','+','-','-','-','-','+','|'}, // 14
        {'|','+','+','+','+','+','+','0','0','0','+','+','+','+','+','+','|'}, // 15
        {'|','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','|'},
    };
    private char[,] _currentBoard;
    public void ClearBoard()
    {
        _currentBoard = _plainBoard;
    }
    public void ShowBoard()
    {
        for(int i = 0; i < _currentBoard.GetLength(0); i++)
        {
            for(int j = 0; j < _currentBoard.GetLength(1); j++)
            {
                Console.Write(_currentBoard.GetValue(i, j));
            }
            Console.WriteLine();
        }
    }
    public void UpdateBoard(Dictionary<IPlayer,List<IPawn>> pawns, Dictionary<IPlayer, string> players)
    {
        foreach (var p in pawns)
        {
            //cek per player
        }
    }
}