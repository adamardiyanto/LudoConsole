namespace LudoApp;
public class Display
{
    private string[,] _plainBoard = new string[,]
    {  //    '1' '2' '3' '4' '5' '6' '7' '8' '9' "[ ]" '1' '2' '3' '4' '5'  
        {" | ","---","---","---","---","---","---","---","---","---","---","---","---","---","---","---"," | "}, 
        {" | "," + "," + "," + "," + "," + "," + ","[ ]","[ ]","[ ]"," + "," + "," + "," + "," + "," + "," | "}, // 1
        {" | "," + ","---","---","---","---"," + ","[ ]","[ ]","[S]"," + ","---","---","---","---"," + "," | "}, // 2
        {" | "," + ","---","[ ]","[ ]","---"," + ","[*]","[ ]","[ ]"," + ","---","[ ]","[ ]","---"," + "," | "}, // 3
        {" | "," + ","---","[ ]","[ ]","---"," + ","[ ]","[ ]","[ ]"," + ","---","[ ]","[ ]","---"," + "," | "}, // 4
        {" | "," + ","---","---","---","---"," + ","[ ]","[ ]","[ ]"," + ","---","---","---","---"," + "," | "}, // 5
        {" | "," + "," + "," + "," + "," + "," + ","[ ]","[ ]","[ ]"," + "," + "," + "," + "," + "," + "," | "}, // 6
        {" | ","[ ]","[S]","[ ]","[ ]","[ ]","[ ]","---","---","---","[ ]","[ ]","[ ]","[*]","[ ]","[ ]"," | "}, // 7
        {" | ","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]","---","---","---","[ ]","[ ]","[ ]","[ ]","[ ]","[ ]"," | "}, // 8
        {" | ","[ ]","[ ]","[*]","[ ]","[ ]","[ ]","---","---","---","[ ]","[ ]","[ ]","[ ]","[S]","[ ]"," | "}, // 9
        {" | "," + "," + "," + "," + "," + "," + ","[ ]","[ ]","[ ]"," + "," + "," + "," + "," + "," + "," | "}, // 10    
        {" | "," + ","---","---","---","---"," + ","[ ]","[ ]","[ ]"," + ","---","---","---","---"," + "," | "}, // 11
        {" | "," + ","---","[ ]","[ ]","---"," + ","[ ]","[ ]","[ ]"," + ","---","[ ]","[ ]","---"," + "," | "}, // 12
        {" | "," + ","---","[ ]","[ ]","---"," + ","[ ]","[ ]","[*]"," + ","---","[ ]","[ ]","---"," + "," | "}, // 13
        {" | "," + ","---","---","---","---"," + ","[S]","[ ]","[ ]"," + ","---","---","---","---"," + "," | "}, // 14
        {" | "," + "," + "," + "," + "," + "," + ","[ ]","[ ]","[ ]"," + "," + "," + "," + "," + "," + "," | "}, // 15
        {" | ","---","---","---","---","---","---","---","---","---","---","---","---","---","---","---"," | "},
    };
    private string[,] _currentBoard;
    public void ClearBoard()
    {
        _currentBoard = _plainBoard;
    }
    public void ShowBoard()
    {
        for(int i = 0; i < _currentBoard.GetLength(0); i++)
        {
            for(int j = 0; j < _currentBoard.GetLength(1); j++)
            {
                Console.Write(_currentBoard.GetValue(i, j));
            }
            Console.WriteLine();
        }
    }
    public void UpdateBoard(Dictionary<IPlayer,List<IPawn>> pawns, Dictionary<IPlayer, string> players)
    {
        foreach (var p in players)
        {
            //cek per player
            List<IPawn> listPawn = pawns[p.Key];
            string color = p.Value;
            foreach(var pawn in listPawn)
            {
                switch(pawn.GetPosition())
                {
                    case 0:
                        if (color == Color.Red.ToString())
                        {

                        }
                        break;
                    case 1:
                        break;

                }
            }
        }
    }
    public string GetPawnColor(string color)
    {
        if (color == Color.Blue.ToString()) return "[B]";
        else if (color == Color.Yellow.ToString()) return "[Y]";
        else if (color == Color.Red.ToString()) return "[R]";
        else return "[G]"; //green
    }
}